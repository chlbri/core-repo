import { StateValueMap } from 'xstate';
import * as z from 'zod';
import { GetShape, Partialize } from '../types/zod';
export declare function singleOrArraySchema<S extends z.ZodTypeAny>(schema: S): z.ZodUnion<[S, z.ZodArray<S, "many">]>;
export declare function singleOrArrayObjectSchema<S extends z.ZodRawShape>(schema: z.ZodObject<S>): z.ZodUnion<[z.ZodObject<S, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof S]: S[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k in keyof S]: S[k]["_output"]; }>[k_1]; }, { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof S]: S[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof S]: S[k_2]["_input"]; }>[k_3]; }>, z.ZodArray<z.ZodObject<S, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof S]: S[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k in keyof S]: S[k]["_output"]; }>[k_1]; }, { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof S]: S[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof S]: S[k_2]["_input"]; }>[k_3]; }>, "many">]>;
export declare function condSchema<C extends z.ZodTypeAny, E extends z.ZodTypeAny>(context: C, event: E): z.ZodFunction<z.ZodTuple<[C, E], z.ZodUnknown>, z.ZodBoolean>;
export declare function assignFunctionSchema<C extends z.AnyZodObject, E extends z.ZodTypeAny>(context: C, event: E): z.ZodOptional<z.ZodFunction<z.ZodTuple<[C, E], null>, Partialize<C>>>;
export declare function propertyAssignerSchema<C extends z.AnyZodObject, E extends z.ZodTypeAny>(context: C, event: E): z.ZodObject<{ [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>[k_2]; }, { [k_4 in keyof z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>[k_4]; }>;
export declare function actionFunctionSchema<C extends z.ZodTypeAny, E extends z.ZodTypeAny>(context: C, event: E): z.ZodOptional<z.ZodFunction<z.ZodTuple<[C, E], null>, z.ZodVoid>>;
export declare const valueMapSchema: z.ZodSchema<StateValueMap>;
export declare function transitionSchema<C extends z.AnyZodObject, E extends z.ZodTypeAny>(context: C, event: E): z.ZodObject<{
    cond: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodFunction<z.ZodTuple<[C, E], z.ZodUnknown>, z.ZodBoolean>, z.ZodArray<z.ZodFunction<z.ZodTuple<[C, E], z.ZodUnknown>, z.ZodBoolean>, "many">]>, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>]>>;
    actions: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodObject<{ [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>[k_2]; }, { [k_4 in keyof z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>[k_4]; }>, z.ZodArray<z.ZodObject<{ [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }, "strip", z.ZodTypeAny, { [k_2 in keyof z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>[k_2]; }, { [k_4 in keyof z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>[k_4]; }>, "many">]>, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>]>, z.ZodUnion<[z.ZodOptional<z.ZodFunction<z.ZodTuple<[C, E], null>, Partialize<C>>>, z.ZodArray<z.ZodOptional<z.ZodFunction<z.ZodTuple<[C, E], null>, Partialize<C>>>, "many">]>]>>;
    in: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodType<StateValueMap, z.ZodTypeDef, StateValueMap>]>>;
    target: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    internal: z.ZodOptional<z.ZodBoolean>;
    meta: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<{
    cond: string | string[] | ((args_0: C extends z.ZodType<any, any, any> ? C["_input"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_input"] : never, ...args_2: unknown[]) => boolean) | ((args_0: C extends z.ZodType<any, any, any> ? C["_input"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_input"] : never, ...args_2: unknown[]) => boolean)[] | undefined;
    actions: string | string[] | { [k_2 in keyof z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>[k_2]; } | { [k_2 in keyof z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>[k_2]; }[] | ((args_0: C extends z.ZodType<any, any, any> ? C["_input"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_input"] : never) => { [k_6 in keyof z.objectUtil.addQuestionMarks<{ [k_5 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_5]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_5 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_5]["_output"]; }>[k_6]; }) | (((args_0: C extends z.ZodType<any, any, any> ? C["_input"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_input"] : never) => { [k_6 in keyof z.objectUtil.addQuestionMarks<{ [k_5 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_5]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_5 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_5]["_output"]; }>[k_6]; }) | undefined)[] | undefined;
    in: string | StateValueMap | undefined;
    target: string | string[] | undefined;
    internal: boolean | undefined;
    meta: Record<string, any> | undefined;
    description: string | undefined;
}>]: z.objectUtil.addQuestionMarks<{
    cond: string | string[] | ((args_0: C extends z.ZodType<any, any, any> ? C["_input"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_input"] : never, ...args_2: unknown[]) => boolean) | ((args_0: C extends z.ZodType<any, any, any> ? C["_input"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_input"] : never, ...args_2: unknown[]) => boolean)[] | undefined;
    actions: string | string[] | { [k_2 in keyof z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>[k_2]; } | { [k_2 in keyof z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_1 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_1]["_output"]; }>[k_2]; }[] | ((args_0: C extends z.ZodType<any, any, any> ? C["_input"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_input"] : never) => { [k_6 in keyof z.objectUtil.addQuestionMarks<{ [k_5 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_5]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_5 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_5]["_output"]; }>[k_6]; }) | (((args_0: C extends z.ZodType<any, any, any> ? C["_input"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_input"] : never) => { [k_6 in keyof z.objectUtil.addQuestionMarks<{ [k_5 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_5]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_5 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_5]["_output"]; }>[k_6]; }) | undefined)[] | undefined;
    in: string | StateValueMap | undefined;
    target: string | string[] | undefined;
    internal: boolean | undefined;
    meta: Record<string, any> | undefined;
    description: string | undefined;
}>[k_1]; }, { [k_3 in keyof z.objectUtil.addQuestionMarks<{
    cond: string | string[] | ((args_0: C extends z.ZodType<any, any, any> ? C["_output"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_output"] : never, ...args_2: unknown[]) => boolean) | ((args_0: C extends z.ZodType<any, any, any> ? C["_output"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_output"] : never, ...args_2: unknown[]) => boolean)[] | undefined;
    actions: string | string[] | { [k_4 in keyof z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>[k_4]; } | { [k_4 in keyof z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>[k_4]; }[] | ((args_0: C extends z.ZodType<any, any, any> ? C["_output"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_output"] : never) => { [k_8 in keyof z.objectUtil.addQuestionMarks<{ [k_7 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_7]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_7 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_7]["_input"]; }>[k_8]; }) | (((args_0: C extends z.ZodType<any, any, any> ? C["_output"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_output"] : never) => { [k_8 in keyof z.objectUtil.addQuestionMarks<{ [k_7 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_7]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_7 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_7]["_input"]; }>[k_8]; }) | undefined)[] | undefined;
    in: string | StateValueMap | undefined;
    target: string | string[] | undefined;
    internal: boolean | undefined;
    meta: Record<string, any> | undefined;
    description: string | undefined;
}>]: z.objectUtil.addQuestionMarks<{
    cond: string | string[] | ((args_0: C extends z.ZodType<any, any, any> ? C["_output"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_output"] : never, ...args_2: unknown[]) => boolean) | ((args_0: C extends z.ZodType<any, any, any> ? C["_output"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_output"] : never, ...args_2: unknown[]) => boolean)[] | undefined;
    actions: string | string[] | { [k_4 in keyof z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>[k_4]; } | { [k_4 in keyof z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_3 in keyof { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }]: { [k in keyof { [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }]: z.ZodOptional<{ [key in keyof GetShape<C>]: z.ZodFunction<z.ZodTuple<[C, E], null>, GetShape<C>[key]>; }[k]>; }[k_3]["_input"]; }>[k_4]; }[] | ((args_0: C extends z.ZodType<any, any, any> ? C["_output"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_output"] : never) => { [k_8 in keyof z.objectUtil.addQuestionMarks<{ [k_7 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_7]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_7 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_7]["_input"]; }>[k_8]; }) | (((args_0: C extends z.ZodType<any, any, any> ? C["_output"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_output"] : never) => { [k_8 in keyof z.objectUtil.addQuestionMarks<{ [k_7 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_7]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_7 in keyof { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }]: { [key_1 in keyof GetShape<C>]: z.ZodOptional<GetShape<C>[key_1]>; }[k_7]["_input"]; }>[k_8]; }) | undefined)[] | undefined;
    in: string | StateValueMap | undefined;
    target: string | string[] | undefined;
    internal: boolean | undefined;
    meta: Record<string, any> | undefined;
    description: string | undefined;
}>[k_3]; }>;
export declare function alwaysSchema<C extends z.ZodTypeAny, E extends z.ZodTypeAny>(context: C, event: E): z.ZodUnion<[z.ZodObject<{
    cond: z.ZodFunction<z.ZodTuple<[C, E], z.ZodUnknown>, z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    cond: (args_0: C extends z.ZodType<any, any, any> ? C["_input"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_input"] : never, ...args_2: unknown[]) => boolean;
}, {
    cond: (args_0: C extends z.ZodType<any, any, any> ? C["_output"] : never, args_1: E extends z.ZodType<any, any, any> ? E["_output"] : never, ...args_2: unknown[]) => boolean;
}>, z.ZodString]>;
export declare const stateConfigSchema: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
export declare const machineConfigSchema: z.ZodObject<{
    states: z.ZodEffects<z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>, Record<string, {}>, Record<string, {}>>, Record<string, {}>, Record<string, {}>>;
}, "strict", z.ZodTypeAny, {
    states: Record<string, {}>;
}, {
    states: Record<string, {}>;
}>;
