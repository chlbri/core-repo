import { CollectionPermissions } from '../../entities';
import { Count, CountAll, CreateMany, CreateOne, CRUD, DeleteAll, DeleteMany, DeleteManyByIds, DeleteOne, DeleteOneById, ReadAll, ReadMany, ReadManyByIds, ReadOne, ReadOneById, RemoveAll, RemoveMany, RemoveManyByIds, RemoveOne, RemoveOneById, RetrieveAll, RetrieveMany, RetrieveManyByIds, RetrieveOne, RetrieveOneById, SetAll, SetMany, SetManyByIds, SetOne, SetOneById, UpdateAll, UpdateMany, UpdateManyByIds, UpdateOne, UpdateOneById, UpsertMany, UpsertOne, WI, WO } from '../../types/_crud';
import { Entity } from '../../entities';
export declare class ArrayCRUD_DB<T extends Entity> implements CRUD<T> {
    private _db;
    private permissions;
    constructor(_db: WI<T>[], permissions: CollectionPermissions);
    __update: (payload: string[], update: WO<T>) => void;
    rinitDB(): void;
    get length(): number;
    createMany: CreateMany<T>;
    createOne: CreateOne<T>;
    upsertOne: UpsertOne<T>;
    upsertMany: UpsertMany<T>;
    readAll: ReadAll<T>;
    readMany: ReadMany<T>;
    readManyByIds: ReadManyByIds<T>;
    readOne: ReadOne<T>;
    readOneById: ReadOneById<T>;
    countAll: CountAll;
    count: Count<T>;
    updateAll: UpdateAll<T>;
    updateMany: UpdateMany<T>;
    updateManyByIds: UpdateManyByIds<T>;
    updateOne: UpdateOne<T>;
    updateOneById: UpdateOneById<T>;
    setAll: SetAll<T>;
    setMany: SetMany<T>;
    setManyByIds: SetManyByIds<T>;
    setOne: SetOne<T>;
    setOneById: SetOneById<T>;
    deleteAll: DeleteAll;
    deleteMany: DeleteMany<T>;
    deleteManyByIds: DeleteManyByIds<T>;
    deleteOne: DeleteOne<T>;
    deleteOneById: DeleteOneById<T>;
    retrieveAll: RetrieveAll;
    retrieveMany: RetrieveMany<T>;
    retrieveManyByIds: RetrieveManyByIds<T>;
    retrieveOne: RetrieveOne<T>;
    retrieveOneById: RetrieveOneById<T>;
    removeAll: RemoveAll;
    removeMany: RemoveMany<T>;
    removeManyByIds: RemoveManyByIds<T>;
    removeOne: RemoveOne<T>;
    removeOneById: RemoveOneById<T>;
}
